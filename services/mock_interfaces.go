// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"
	models "sms_func/models"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	service "developer.zopsmart.com/go/gofr/pkg/service"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockHTTPService is a mock of HTTPService interface.
type MockHTTPService struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPServiceMockRecorder
}

// MockHTTPServiceMockRecorder is the mock recorder for MockHTTPService.
type MockHTTPServiceMockRecorder struct {
	mock *MockHTTPService
}

// NewMockHTTPService creates a new mock instance.
func NewMockHTTPService(ctrl *gomock.Controller) *MockHTTPService {
	mock := &MockHTTPService{ctrl: ctrl}
	mock.recorder = &MockHTTPServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPService) EXPECT() *MockHTTPServiceMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *MockHTTPService) Bind(resp []byte, i interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", resp, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockHTTPServiceMockRecorder) Bind(resp, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockHTTPService)(nil).Bind), resp, i)
}

// Delete mocks base method.
func (m *MockHTTPService) Delete(ctx context.Context, api string, body []byte) (*service.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, api, body)
	ret0, _ := ret[0].(*service.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockHTTPServiceMockRecorder) Delete(ctx, api, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHTTPService)(nil).Delete), ctx, api, body)
}

// Get mocks base method.
func (m *MockHTTPService) Get(ctx context.Context, api string, params map[string]interface{}) (*service.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, api, params)
	ret0, _ := ret[0].(*service.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHTTPServiceMockRecorder) Get(ctx, api, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTPService)(nil).Get), ctx, api, params)
}

// Patch mocks base method.
func (m *MockHTTPService) Patch(ctx context.Context, api string, params map[string]interface{}, body []byte) (*service.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", ctx, api, params, body)
	ret0, _ := ret[0].(*service.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockHTTPServiceMockRecorder) Patch(ctx, api, params, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockHTTPService)(nil).Patch), ctx, api, params, body)
}

// Post mocks base method.
func (m *MockHTTPService) Post(ctx context.Context, api string, params map[string]interface{}, body []byte) (*service.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, api, params, body)
	ret0, _ := ret[0].(*service.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockHTTPServiceMockRecorder) Post(ctx, api, params, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHTTPService)(nil).Post), ctx, api, params, body)
}

// MockSMS is a mock of SMS interface.
type MockSMS struct {
	ctrl     *gomock.Controller
	recorder *MockSMSMockRecorder
}

// MockSMSMockRecorder is the mock recorder for MockSMS.
type MockSMSMockRecorder struct {
	mock *MockSMS
}

// NewMockSMS creates a new mock instance.
func NewMockSMS(ctrl *gomock.Controller) *MockSMS {
	mock := &MockSMS{ctrl: ctrl}
	mock.recorder = &MockSMSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSMS) EXPECT() *MockSMSMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSMS) Delete(ctx *gofr.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSMSMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSMS)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockSMS) Get(ctx *gofr.Context) ([]models.SMS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].([]models.SMS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSMSMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSMS)(nil).Get), ctx)
}

// GetByID mocks base method.
func (m *MockSMS) GetByID(ctx *gofr.Context, id uuid.UUID) (models.SMS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(models.SMS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockSMSMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockSMS)(nil).GetByID), ctx, id)
}

// POST mocks base method.
func (m *MockSMS) POST(ctx *gofr.Context, sms models.SMS) (models.SMS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "POST", ctx, sms)
	ret0, _ := ret[0].(models.SMS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// POST indicates an expected call of POST.
func (mr *MockSMSMockRecorder) POST(ctx, sms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockSMS)(nil).POST), ctx, sms)
}

// PUT mocks base method.
func (m *MockSMS) PUT(ctx *gofr.Context, sms models.SMS) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PUT", ctx, sms)
	ret0, _ := ret[0].(error)
	return ret0
}

// PUT indicates an expected call of PUT.
func (mr *MockSMSMockRecorder) PUT(ctx, sms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockSMS)(nil).PUT), ctx, sms)
}
